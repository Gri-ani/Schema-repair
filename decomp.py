import re
from tqdm import tqdm
from openai import OpenAI

from utils import read_json, write_json

COTD_FEW_SHOT = """I'm going to ask you a question. I want you to decompose it into a series of non-composite noun concepts and attributes. 
If you are uncertain about concepts, only output attributes. You should wrap each concept and attribute in <sub_c></sub_c> tags.
Once you have all the concepts you need to cover the question, output <FIN></FIN> tags.
Let's go through some examples together. Do you understand the instructions?
Assistant: Yes, I understand that I'm meant to decompose questions into concepts and attributes and wrap each component in the appropriate tags. 
Once I have all the information I need, I'll output <FIN></FIN> tags.
Human: Question: For movies with the keyword of \"civil war\", calculate the average revenue generated by these movies.

Assistant:
<sub_c>movies:keyword</sub_c>
<sub_c>movies:revenue</sub_c>
<FIN></FIN>

Human: Question: How many customers have a credit limit of not more than 100,000 and which customer made the highest total payment amount for the year 2004?
Assistant:
<sub_c>customers:credit limit</sub_c>
<sub_c>customers:payment amount</sub_c>
<sub_c>year</sub_c>
<FIN></FIN>

Human: Question: What is the aircraft name for the flight with number 99?
Assistant:
<sub_c>aircraft:name</sub_c>
<sub_c>flight:number</sub_c>
<FIN></FIN>

Human: Question: On which day has it neither been foggy nor rained in the zip code of 94107?
Assistant:
<sub_c>zip code</sub_c>
<sub_c>weather</sub_c>
<FIN></FIN>

Human: Question: What is the id of the trip that started from the station with the highest dock count?
Assistant:
<sub_c>trip:id</sub_c>
<sub_c>station:dock count</sub_c>
<FIN></FIN>


"""

def get_resp(resp:str):
  r = re.findall(r"<sub_c>(.*?)</sub_c>", resp)
  return r

def populate_decomp(dataset):
  qs = read_json(f'./data/{dataset}/dev.json')

  api_key = read_json('./config.json')['api_key']
  client = OpenAI(api_key=api_key)

  outputs = []

  for q_idx, q in enumerate(tqdm(qs)):
    prompt = COTD_FEW_SHOT + f'\nHuman: Question: {q["question"]}\n\nAssistant:'

    resp = client.chat.completions.create(
      model='gpt-3.5-turbo',
      temperature=0,
      messages=[
        {'role': 'user', 'content': prompt}
      ]
    )

    outputs.append(resp.choices[0].message.content)
  
    write_json(outputs, f'./data/{dataset}/decomp.json')

def parse(dataset):
  resp = read_json(f'./data/{dataset}/decomp.json')
  resp = [get_resp(r) for r in resp]
  write_json(resp, f'./data/{dataset}/decomp.json')

if __name__ == '__main__':
  dataset = ['bird', 'spider'][1]
  parse(dataset)

